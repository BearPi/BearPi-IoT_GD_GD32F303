##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [2.30.0] date: [Sat Mar 23 14:46:28 CST 2019]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------
######################################
# target
######################################
TARGET = Huawei_LiteOS

PROJECTBASE = $(abspath $(CURDIR))
TOP_DIR     = $(abspath $(PROJECTBASE)/../../../..)

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og

#######################################
# paths
#######################################
# firmware library path
PERIFLIB_PATH =

# Build path
BUILD_DIR = build



######################################
# source
######################################
# ASM


# C sources

DRIVER_SRC =  \
		${wildcard $(TOP_DIR)/GD32F30x_Firmware_Library/GD32F30x_standard_peripheral/Source/*.c}
        C_SOURCES += $(DRIVER_SRC)        
USER_SRC =  \
		${wildcard $(TOP_DIR)/BearPi-IoT_GD32F303_Demo_Suites/Projects/11_TIMER_Breath_LED/*.c} 
        C_SOURCES += $(USER_SRC)  

BOARD_SRC =  \
		$(TOP_DIR)/BearPi-IoT_GD32F303_Demo_Suites/Utilities/BearPi-IoT_gd32f303.c	
        C_SOURCES += $(BOARD_SRC)  
		
CMSIS_SRC =  \
		$(TOP_DIR)/GD32F30x_Firmware_Library/CMSIS/GD/GD32F30x/Source/system_gd32f30x.c		
        C_SOURCES += $(CMSIS_SRC)

ASM_SOURCES =  \
		${wildcard $(PROJECTBASE)/GD32F303RGT6_GCC.s}


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS =

# C defines
C_DEFS =  \
        -D GD32F30X_XD 


# C includes
DRIVER_INC=  \
		-I $(TOP_DIR)/GD32F30x_Firmware_Library/GD32F30x_standard_peripheral/Include
        C_INCLUDES += $(DRIVER_INC)        
USER_INC =  \
		-I $(TOP_DIR)/BearPi-IoT_GD32F303_Demo_Suites/Projects/11_TIMER_Breath_LED
        C_INCLUDES += $(USER_INC)  

BOARD_INC =  \
		-I $(TOP_DIR)/BearPi-IoT_GD32F303_Demo_Suites/Utilities
        C_INCLUDES += $(BOARD_INC)  
		
CMSIS_INC =  \
		-I $(TOP_DIR)/GD32F30x_Firmware_Library/CMSIS/GD/GD32F30x/Include \
		-I $(TOP_DIR)/GD32F30x_Firmware_Library/CMSIS
        C_INCLUDES += $(CMSIS_INC)


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = GD32F303RGT6.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections
LDFLAGS += -u _printf_float

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***